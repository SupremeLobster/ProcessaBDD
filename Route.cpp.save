#include "Route.h"

Route::Route() {

    a_airline  = a_source = a_dest = a_plane_IATAs = "";
    a_codeshare = '\0';
    a_airline_id = a_source_id = a_dest_id = a_n_stops = 0;
}

Route::Route(int airline_id) {

    a_airline_id = airline_id;
}

Route::Route(const vector<string>& v) {

    vector<string>::const_iterator it = v.begin();

    a_airline = *it; it++;
    if(*it != "\\N") a_airline_id = stoi(*it);
    else a_airline_id = -1;
    it++;
    a_source = *it; it++;
    if(*it != "\\N") a_source_id = stoi(*it);
    else a_source_id = -1;
    it++;
    a_dest = *it; it++;
    if(*it != "\\N") a_dest_id = stoi(*it);
    else a_dest_id = -1;
    it++;
    a_codeshare = (*it)[0]; it++;
    if(*it != "\\N") a_n_stops = stoi(*it);
    else a_n_stops = -1;
    it++;
    a_plane_IATAs = *it; it++;
}

void Route::mostra() const {

    cout << a_airline << "," << a_airline_id << "," << a_source << "," << a_source_id << "," << a_dest << "," << a_dest_id << ",";
    if(a_codeshare != '\0') cout << a_codeshare;
    cout << "," << a_n_stops << "," << a_plane_IATAs;
}

bool Route::has_plane(string plane_IATA) const {

    return (plane_IATA.length()==3 && a_plane_IATAs.find(plane_IATA)!=string::npos);
}

string Route::get_airline() const {

    return a_airline;
}

int Route::get_airline_id() const {

    return a_airline_id;
}

int Route::get_source_id() const {

    return a_source_id;
}

int Route::get_dest_id() const {

    return a_dest_id;
}

char Route::get_codeshare() const {

    return a_codeshare;
}
